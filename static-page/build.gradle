/*
 * Copyright (c) 2017. iDoc LLC
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3)The name of the author may not be used to
 *     endorse or promote products derived from this software without
 *     specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.attribute.BasicFileAttributes
import java.nio.file.attribute.FileTime
import java.text.SimpleDateFormat

plugins {
    id "com.moowork.node" version "0.13"
}

version "0.3"
group "org.samopal"

project.ext.set("tmpDir", "papka")
project.ext.set("distDir", "/var/www/papka")
project.ext.set("debug", false)
project.ext.set("nodeDir", 'bower_modules')
project.ext.set("npmCacheDir", new File("${gradle.getGradleUserHomeDir()}/caches/npm").absolutePath)

repositories {
    mavenLocal()
}

node {
    version = '6.5.0'
    download = true
    npmVersion = '3.10.3'
    workDir = file(npmCacheDir)
    nodeModulesDir = file(nodeDir)
}

def allJsModules = [
        "./src/js/widget.js",
        "./src/js/FileSaver.min.js",
        "./src/js/BrowserInfo.js",
        "./src/js/utils.js",
        "./src/js/autocomplete.js",
        "./src/js/fancyAutocomplete.js",
        "./src/js/actionLogin.js",
        "./src/js/actionWizard.js",
        "./src/js/clipboard.min.js",
        "./src/js/actionDoc.js",
        "./src/js/actionCore.js",
        "./src/js/companyManager.js",
        "./src/js/contacts.js",
        "./src/js/datepickr.js",
        "./src/js/sha256.js",
        "./src/js/md5.js",
        "./src/js/WebSock.js",
        "./src/js/DocumentChat.js",
        "./src/js/DocumentsTrashCollection.js",
        "./src/js/DocumentsCollection.js",
        "./src/js/DocumentsModelView.js",
        "./src/js/main.js",
        "./src/js/menu.js",
        "./src/js/CryptoPlugin.min.js",
        "./src/js/CryptoPluginGUI.js"
]

npm_update {
    args = ['--production', '--loglevel', 'warn']
}

task clean(type: Delete) {
    delete project.distDir, project.buildDir, 'node_modules', 'bower_components', tmpDir
}

task createAllJs(type: NodeTask) {
    script = file('./node_modules/uglify-js/bin/uglifyjs')
    if (debug) {
        args << "-b"
    } else {
        args << "-m"
    }
    args << '--screw-ie8'
    args << '-o'
    args << project.tmpDir + "/js/all.js"
    // args << "./src/js/version.js" // autogenerated file
    args.addAll(allJsModules)
}

createAllJs.onlyIf {
    def result = Paths.get("${project.tmpDir}/js/all.js");
    if (Files.exists(result)) {
        FileTime ts = FileTime.fromMillis(0);
        allJsModules.forEach({ String file ->
            FileTime ts1 = Files.readAttributes(Paths.get(file), BasicFileAttributes.class).lastModifiedTime()
            if (ts1 > ts) ts = ts1
        })
        return Files.readAttributes(result, BasicFileAttributes.class).lastModifiedTime() < ts;
    } else {
        return true
    }
}

task syncHtml(type: Copy) {
    it.dependsOn npm_install
    from "src"
    into project.tmpDir
    include 'info/*.html'
    include '*.html'

    List<String> list = []
    if (!debug) {
        eachFile({ FileCopyDetails file ->
            if (!Files.exists(Paths.get(project.tmpDir + "/" + file.getRelativePath()))){
                list << project.tmpDir + "/" + file.getPath()
            } else {
                FileTime td = Files.readAttributes(Paths.get(project.tmpDir + "/" + file.getRelativePath()), BasicFileAttributes.class).lastModifiedTime()
                FileTime ts = Files.readAttributes(Paths.get("src/" + file.getPath()), BasicFileAttributes.class).lastModifiedTime()
                if (ts > td) {
                    list << project.tmpDir + "/" + file.getPath()
                } else {
                    file.exclude()
                }
            }
        })
    }

    doLast {
        list.each { String fileName ->
            println "Compress: $fileName"
            exec {
                executable = 'node'
                args = ['./node_modules/html-minify/bin/htmlminify', '-o', fileName, fileName];
            }
        }
    }
}

task syncRes(type: Copy) {
    it.dependsOn syncHtml
    from "src"
    into project.tmpDir
    include 'fonts/**'
    include 'pdf/**'
    include 'img/**'
    include 'templates/*.html'
    include 'favicon.ico'
    include 'robots.txt'
}

task build() {
    it.dependsOn createAllJs
    it.dependsOn syncRes
    doLast {
        delete './src/js/version.js'

        copy {
            from "./src/js/xlsx.core.min.js"
            into project.tmpDir + "/js/"
        }
    }
}

task dist(type: Sync) {
    it.dependsOn build
    from project.tmpDir
    into project.distDir
//    preserve{
//        include 'plugin/**'
//        include 'cryptoplugin.cab'
//    }
}

task makedirs() {
    doLast {
        new File("${project.tmpDir}/css/").mkdirs()
        new File("${project.tmpDir}/js/").mkdirs()
    }
}

def needBuildAllCSS = true;
def result2 = new File("${project.tmpDir}/css/all.css");
//def result2 = Paths.get("${project.tmpDir}/css/all.css");
if (result2.exists()) {
    FileTime ts = FileTime.fromMillis(0);
    fileTree(dir: "./src/style", include: "*").forEach({ File file ->
        FileTime ts1 = Files.readAttributes(file.toPath(), BasicFileAttributes.class).lastModifiedTime()
        if (ts1 > ts) ts = ts1
    })
    needBuildAllCSS = Files.readAttributes(result2.getAbsoluteFile().toPath(), BasicFileAttributes.class).lastModifiedTime() < ts;
}

task buildCSS(type: NodeTask) {
    it.dependsOn npm_install
    it.dependsOn makedirs

    new File("${project.buildDir}/css").mkdirs()
    build.dependsOn it
    script = file("./node_modules/stylus/bin/stylus")
    args = ['-u', 'nib', './src/style/main.styl', '--out', "${project.tmpDir}/css/all.css"]
    if (project.debug) {
        args << "--line-numbers" << "--firebug"
    } else {
        args << "--compress"
    }
}
